x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong_db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

services:
  post_service:
    container_name: post_service
    environment:
      - SERVER_PORT=${POST_SVC_PORT}
      - DB_USER=${POST_SVC_DB_USER}
      - DB_PASSWORD=${POST_SVC_DB_PASSWORD}
      - DB_NAME=${POST_SVC_DB_NAME}
      - DB_HOST=${POST_SVC_DB_HOST}
      - DB_PORT=${POST_SVC_DB_PORT}
      - KAFKA_BROKER=${KAFKA_BROKER}
    tty: true
    build: ./simple_services/post_service
    ports:
      - "${POST_SVC_PORT}:${POST_SVC_PORT}"
    restart: on-failure
    volumes:
      - ./simple_services/post_service:/app
    depends_on:
      post_db:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
    networks:
      - social_network

  post_db:
    image: postgres:latest
    container_name: post_db
    environment:
      - POSTGRES_USER=${POST_SVC_DB_USER}
      - POSTGRES_PASSWORD=${POST_SVC_DB_PASSWORD}
      - POSTGRES_DB=${POST_SVC_DB_NAME}
      - DATABASE_HOST=${POST_SVC_DB_HOST}
    ports:
      - "1234:5432"
    volumes:
      - post_svc_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${POST_SVC_DB_NAME}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - social_network

  follower_service:
    container_name: follower_service
    environment:
      - SERVER_PORT=${FOLLOWER_SVC_PORT}
      - DB_URI=${FOLLOWER_DB_URI}
      - DB_USER=${FOLLOWER_DB_USER}
      - DB_PASSWORD=${FOLLOWER_DB_PASSWORD}
      - KAFKA_BROKER=${KAFKA_BROKER}
    tty: true
    build: ./simple_services/follower_service
    ports:
      - "${FOLLOWER_SVC_PORT}:${FOLLOWER_SVC_PORT}"
    restart: on-failure
    volumes:
      - ./simple_services/follower_service:/app
    depends_on:
      - follower_db
    networks:
      - social_network

  follower_db:
    image: neo4j:5.15.0
    container_name: follower_db
    environment:
      - NEO4J_AUTH=${FOLLOWER_DB_USER}/${FOLLOWER_DB_PASSWORD}
    restart: always
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - follower_svc_data:/var/lib/neo4j/data
    networks:
      - social_network

  user_service:
    container_name: user_service
    environment:
      - SERVER_PORT=${USER_SVC_PORT}
      - MONGODB_URI=mongodb://${USER_DB_ROOT_USERNAME}:${USER_DB_ROOT_PASSWORD}@user_db
      - KAFKA_BROKER=${KAFKA_BROKER}
    tty: true
    build: ./simple_services/user_service
    ports:
      - "${USER_SVC_PORT}:${USER_SVC_PORT}"
    restart: on-failure
    volumes:
      - ./simple_services/user_service:/app
    depends_on:
      - user_db
    networks:
      - social_network

  user_db:
    container_name: user_db
    image: mongodb/mongodb-community-server:6.0-ubi8
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${USER_DB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${USER_DB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${USER_DB_NAME}
    restart: always
    volumes:
      - user_svc_data:/data/db
    ports:
      - "12345:27017"
    networks:
      - social_network

  feed_service:
    container_name: feed_service
    environment:
      - SERVER_PORT=${FEED_SVC_PORT}
      - REDIS_URL=redis://${FEED_DB_USER}:${FEED_DB_PASSWORD}@feed_db
      - FOLLOWER_SVC_PORT=${FOLLOWER_SVC_PORT}
      - POST_SVC_PORT=${POST_SVC_PORT}
    tty: true
    build: ./simple_services/feed_service
    ports:
      - "${FEED_SVC_PORT}:${FEED_SVC_PORT}"
    restart: on-failure
    volumes:
      - ./simple_services/feed_service:/app
    depends_on:
      - feed_db
    networks:
      - social_network

  feed_db:
    container_name: feed_db
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${FEED_DB_PASSWORD}
    volumes:
      - feed_svc_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    networks:
      - social_network

  feed_gen_service:
    container_name: feed_gen_service
    environment:
      - SERVER_PORT=${FEED_GEN_SVC_PORT}
      - REDIS_URL=redis://${FEED_DB_USER}:${FEED_DB_PASSWORD}@feed_db
      - FOLLOWER_SVC_PORT=${FOLLOWER_SVC_PORT}
      - POST_SVC_PORT=${POST_SVC_PORT}
      - KAFKA_BROKER=${KAFKA_BROKER}
    tty: true
    build: ./simple_services/feed_gen_service
    ports:
      - "${FEED_GEN_SVC_PORT}:${FEED_GEN_SVC_PORT}"
    restart: on-failure
    volumes:
      - ./simple_services/feed_gen_service:/app
    depends_on:
      feed_db:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
    networks:
      - social_network

  user_complex_service:
    container_name: user_complex_service
    environment:
      - SERVER_PORT=${USER_COMPLEX_SVC_PORT}
      - USER_SVC_PORT=${USER_SVC_PORT}
      - FOLLOWER_SVC_PORT=${FOLLOWER_SVC_PORT}
    tty: true
    build: ./complex_services/user_complex_service
    ports:
      - "${USER_COMPLEX_SVC_PORT}:${USER_COMPLEX_SVC_PORT}"
    restart: on-failure
    volumes:
      - ./complex_services/user_complex_service:/app
    depends_on:
      - user_service
    networks:
      - social_network

  post_complex_service:
    container_name: post_complex_service
    environment:
      - SERVER_PORT=${POST_COMPLEX_SVC_PORT}
      - POST_SVC_PORT=${POST_SVC_PORT}
      - KAFKA_BROKER=${KAFKA_BROKER}
    tty: true
    build: ./complex_services/post_complex_service
    ports:
      - "${POST_COMPLEX_SVC_PORT}:${POST_COMPLEX_SVC_PORT}"
    restart: on-failure
    volumes:
      - ./complex_services/post_complex_service:/app
    depends_on:
      - post_service
    networks:
      - social_network

  follower_complex_service:
    container_name: follower_complex_service
    environment:
      - SERVER_PORT=${FOLLOWER_COMPLEX_SVC_PORT}
      - FOLLOWER_SVC_PORT=${FOLLOWER_SVC_PORT}
      - USER_SVC_PORT=${USER_SVC_PORT}
      - KAFKA_BROKER=${KAFKA_BROKER}
    tty: true
    build: ./complex_services/follower_complex_service
    ports:
      - "${FOLLOWER_COMPLEX_SVC_PORT}:${FOLLOWER_COMPLEX_SVC_PORT}"
    restart: on-failure
    volumes:
      - ./complex_services/follower_complex_service:/app
    depends_on:
      - follower_service
      - user_service
    networks:
      - social_network

  feed_complex_service:
    container_name: feed_complex_service
    environment:
      - SERVER_PORT=${FEED_COMPLEX_SVC_PORT}
      - FEED_SVC_PORT=${FEED_SVC_PORT}
      - POST_SVC_PORT=${POST_SVC_PORT}
      - KAFKA_BROKER=${KAFKA_BROKER}
    tty: true
    build: ./complex_services/feed_complex_service
    ports:
      - "${FEED_COMPLEX_SVC_PORT}:${FEED_COMPLEX_SVC_PORT}"
    restart: on-failure
    volumes:
      - ./complex_services/feed_complex_service:/app
    depends_on:
      - feed_service
      - post_service
    networks:
      - social_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    networks:
      - social_network

  kafka-1:
    container_name: kafka-1
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_BROKER_ID: 1
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - zookeeper
    networks:
      - social_network

  kafka-2:
    container_name: kafka-2
    image: confluentinc/cp-kafka:latest
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_BROKER_ID: 2
    depends_on:
      - zookeeper
    networks:
      - social_network

  kafka-3:
    container_name: kafka-3
    image: confluentinc/cp-kafka:latest
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_BROKER_ID: 3
    depends_on:
      - zookeeper
    networks:
      - social_network

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka-1:29092,kafka-2:29093,kafka-3:29094 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-1:29092,kafka-2:29093,kafka-3:29094 --create --if-not-exists --topic posts --replication-factor 3 --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-1:29092,kafka-2:29093,kafka-3:29094 --list
      "
    networks:
      - social_network

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: ["database"]
    depends_on:
      - kong_db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - social_network
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    profiles: ["database"]
    depends_on:
      - kong_db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - social_network
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    networks:
      - social_network
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "8001:8001/tcp"
      - "8444:8444/tcp"
      - "8002:8002/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./kong:/opt/kong
    security_opt:
      - no-new-privileges

  kong_db:
    container_name: kong_db
    image: postgres:9.5
    profiles: ["database"]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}",
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - social_network
    volumes:
      - kong_data:/var/lib/postgresql/data

secrets:
  kong_postgres_password:
    file: ./kong/KONG_POSTGRES_PASSWORD

volumes:
  post_svc_data:
  follower_svc_data:
  user_svc_data:
  feed_svc_data:
    driver: local
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  social_network:
    driver: bridge
